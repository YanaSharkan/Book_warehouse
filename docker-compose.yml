version: '3.9'

services:
  store_db:
    networks:
      - mynetwork
    hostname: store_db
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: store_db
    volumes:
      - store_postgres_data:/var/lib/postgresql/data/

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - store
      - warehouse
    networks:
      - mynetwork

  mailhog:
    image: mailhog/mailhog
    restart: always
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mynetwork

  warehouse_db:
    networks:
      - mynetwork
    hostname: warehouse_db
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: warehouse_db
    volumes:
      - warehouse_postgres_data:/var/lib/postgresql/data/

  rabbitmq:
    image: rabbitmq
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: rabbitpw
    ports:
      - "5672:5672"
    networks:
      - mynetwork

  store_worker:
    networks:
      - mynetwork
    build:
      context: ./store
      dockerfile: Dockerfile
    restart: always
    command: "celery -A core.celery worker -B -l INFO"
    links:
      - 'store_db:store_db'
    environment:
      DEBUG: '0'
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: store_db
    depends_on:
      - store_db
      - rabbitmq
    volumes:
      - ./store:/app

  store:
    networks:
      - mynetwork
    build:
      context: ./store
      dockerfile: Dockerfile
    restart: always
    command: "python manage.py runserver 0.0.0.0:8000"
    links:
      - 'store_db:store_db'
    environment:
      DEBUG: '0'
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: store_db
    depends_on:
      - store_db
      - rabbitmq
    ports:
      - "8000:8000"
    volumes:
      - ./store:/app

  warehouse:
    networks:
      - mynetwork
    hostname: warehouse
    build:
      context: ./warehouse
      dockerfile: Dockerfile
    restart: always
    environment:
      DEBUG: '0'
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: warehouse_db
    depends_on:
      - warehouse_db
    ports:
      - "8001:8001"
    volumes:
      - ./warehouse:/app

volumes:
  store_postgres_data:
  warehouse_postgres_data:

networks:
  mynetwork:
    driver: bridge

